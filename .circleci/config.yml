version: 2.1

orbs:
  ruby: circleci/ruby@1.2.0

parameters:
  deploy-app:
    type: boolean
    default: false

commands:
  bootstrap:
    steps:
      - checkout
      - run:
          name: Checkout Submodules
          command: git submodule update --init --recursive
      - carthage-bootstrap
      - unset-clone-via-ssh
  restore-build-cache:
    steps:
      - bootstrap
      - restore_cache:
          name: Restore build cache
          key: v1-build-{{ .Environment.CIRCLE_SHA1 }}
  carthage-bootstrap:
    steps:
      - run:
          name: Determine Xcode version
          command: echo "$(xcodebuild -version)" >| xcode_version
      - restore_cache:
          name: Restore Carthage/ cache
          key: carthage-dir-cache-{{ arch }}-{{ checksum "xcode_version" }}-{{ checksum "Cartfile.resolved" }}-v2
      - run:
          name: Bootstrap Carthage dependencies
          command: ./carthage_command.sh
      - save_cache:
          name: Save Carthage/ cache
          key: carthage-dir-cache-{{ arch }}-{{ checksum "xcode_version" }}-{{ checksum "Cartfile.resolved" }}-v2
          paths:
            - Carthage
  unset-clone-via-ssh:
    steps:
      - run:
          name: Unset cloning via SSH instead of HTTPS
          command: git config --global --unset url."ssh://git@github.com".insteadOf
  generate-user-scripts:
    steps:
      - run:
          name: Generate user scripts
          command: npm install && npm run build
  build-client:
    steps:
      - generate-user-scripts
      - run:
          name: Build Client
          command: xcodebuild build-for-testing -scheme Client -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 12'
  build-codegen:
    steps:
       - run:
           name: Build Codegen
           command: xcodebuild build -scheme Codegen -workspace Neeva.xcworkspace -destination 'platform=macOS'
  build-swift-format:
    steps:
      - restore_cache:
          name: Restore swift-format cache
          key: swift-format-cache-{{ arch }}-{{ checksum "xcode_version" }}-{{ checksum "swift-format/Package.swift" }}
      - run:
          name: Build swift-format
          command: |
            cd swift-format
            swift build -c release
            cd ..
      - save_cache:
          name: Save swift-format cache
          key: swift-format-cache-{{ arch }}-{{ checksum "xcode_version" }}-{{ checksum "swift-format/Package.swift" }}
          paths:
            - swift-format/.build
  set-up-cert:
    steps:
      - run:
          name: decode Certificates
          command: echo "$certificates" | base64 --decode > Certificates.p12
      - run:
          name: make Provisioning Profiles directory
          command: mkdir -pv ~/Library/MobileDevice/Provisioning\ Profiles/
      - run:
          name: decode Provisioning Profiles
          command: |
            echo $WIDGET_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/widget.mobileprovision
            echo $SHARE_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/share.mobileprovision
            echo $SAFARI_EXTENSION_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/safari.mobileprovision
            echo $NOTIFICATION_EXTENSION_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/notification.mobileprovision
            echo $CLIENT_INTENT_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/client_intent.mobileprovision
            echo $BROWSER_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/browser.mobileprovision
            echo $APP_CLIP_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/appclip.mobileprovision
            echo $APP_CLIP_2_PROVISION | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/appclip2.mobileprovision
  test-client:
    steps:
      - run:
          name: SharedTests
          command: xcodebuild test-without-building -scheme Client -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 12' -only-testing SharedTests
      - run:
          name: StorageTests
          command: xcodebuild test-without-building -scheme Client -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 12' -only-testing StorageTests
      - run:
          name: ClientTests
          command: xcodebuild test-without-building -scheme Client -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 12' -only-testing ClientTests
  ui-tests:
    steps:
      - run:
          name: UITests
          command: xcodebuild test-without-building -scheme Client -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 12' -only-testing UITests  -resultBundlePath uitests-$CIRCLE_BUILD_NUM.xcresult
      - run:
          name: "Store screenshots"
          command: ./Scripts/uitests-helper.sh move-iphone-screenshots
      - run:
          name: UITests - iPad
          command: xcodebuild test-without-building -scheme Client -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPad Pro (11-inch) (3rd generation)' -only-testing UITests -resultBundlePath uitests-ipad-$CIRCLE_BUILD_NUM.xcresult
      - run:
          name: Zip Test Results
          command: ./Scripts/uitests-helper.sh store-artifacts
          when: always
      - save-artifacts
  xcui-tests:
    steps:
      - run:
          name: XCUITests
          command: >
            xcodebuild test-without-building -scheme Client -workspace Neeva.xcworkspace
            -destination 'platform=iOS Simulator,name=iPhone 12' -resultBundlePath xcuitests-$CIRCLE_BUILD_NUM.xcresult
            $(find -E XCUITests -regex '.*Tests?\.swift' | sed -e 's/^/-only-testing:/' -e 's/\.swift$//' | circleci tests split)
      - store-xcuitest-artifact
  xcui-tests-ipad:
    steps:
      - run:
          name: XCUITests - iPad
          command: >
            xcodebuild test-without-building -scheme Client -workspace Neeva.xcworkspace
            -destination 'platform=iOS Simulator,name=iPad Pro (11-inch) (3rd generation)' -resultBundlePath xcuitests-$CIRCLE_BUILD_NUM.xcresult
            $(find -E XCUITests -regex '.*Tests?\.swift' | sed -e 's/^/-only-testing:/' -e 's/\.swift$//' | circleci tests split)
      - store-xcuitest-artifact
  store-xcuitest-artifact:
    steps:
      - run:
          name: Zip Test Results
          command: |
            mkdir artifacts
            zip -r artifacts/xcuitests-$CIRCLE_BUILD_NUM.xcresult.zip xcuitests-$CIRCLE_BUILD_NUM.xcresult
          when: always
      - save-artifacts
  build-app-clip:
    steps:
      - checkout
      - run:
          name: Build AppClip
          command: xcodebuild build-for-testing -scheme AppClip -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 12'
  app-clip-tests:
    steps:
      - run:
          name: AppClipTests
          command: xcodebuild test-without-building -scheme AppClip -workspace Neeva.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 12' -only-testing AppClipTests
  swift-format-check:
    steps:
      - run:
          name: Check Formatting
          command: ./Scripts/swift-format.sh --check-all --strict
  save-artifacts:
     steps:
       - store_artifacts:
           path: artifacts/
           when: always

jobs:
  build:
    macos:
      xcode: "13.4.1"
    resource_class: macos.x86.medium.gen2
    steps:
      - bootstrap
      - generate-user-scripts
      - ruby/install-deps
      - set-up-cert
      - run:
          name: fastlane
          command: bundle exec fastlane build
      - save-artifacts
workflows:
  version: 2
  build:
    when: << pipeline.parameters.deploy-app >>
    jobs:
      - build
